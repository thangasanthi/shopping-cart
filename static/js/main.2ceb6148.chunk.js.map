{"version":3,"sources":["App.js","serviceWorker.js","state/ShoppingList/shoppingListReducer.js","index.js","state/configureStore.js"],"names":["ShoppingList","lazy","CartList","App","fallback","exact","path","component","Component","Boolean","window","location","hostname","match","INITIAL_STATE","shoppingList","tempShoppingList","cartList","searchValue","rangevalue","min","max","isLoading","itemFound","state","action","type","payload","sortedList","slice","toUpperCase","sort","list1","list2","price","discount","isAlreadAdded","some","list","id","push","qty","filteredList","tempList","alert","trim","forEach","data","name","toLowerCase","length","range","filter","el","item","ReactDOM","render","store","createStore","combineReducers","shopingListReducer","compose","applyMiddleware","thunkMiddleware","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ceb6148.chunk.js","sourcesContent":["import React, { Component, lazy, Suspense } from 'react';\r\nimport \"./App.css\";\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\n\r\nconst ShoppingList = lazy(() => import('./components/ShoppingList/index.js'));\r\nconst CartList = lazy(() => import('./components/Cart/index.js'));\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Suspense fallback={'Loading...'}>\r\n        <HashRouter>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={ShoppingList} />\r\n            <Route exact path=\"/cart\" component={CartList} />\r\n          </Switch>\r\n        </HashRouter>\r\n      </Suspense >\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const INITIAL_STATE = {\r\n  shoppingList: [],\r\n  tempShoppingList: [],\r\n  cartList: [],\r\n  searchValue: null,\r\n  rangevalue: { min: 100, max: 10000 },\r\n  isLoading: false,\r\n  itemFound: true\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_LOADING_STATUS\":\r\n    return { ...state, isLoading: action.payload };\r\n\r\n    case \"GET_SHOPPING_LIST_SUCCESS\":\r\n      return { ...state, shoppingList: action.payload, tempShoppingList: action.payload, isLoading: false };\r\n\r\n    case \"SORT_SHOPPING_LIST\":\r\n      let sortedList = state.shoppingList.slice();\r\n      if (action.payload.toUpperCase() === \"HTL\") {\r\n        sortedList.sort((list1, list2) => list2.price - list1.price);\r\n      }\r\n      if (action.payload.toUpperCase() === \"LTH\") {\r\n        sortedList.sort((list1, list2) => list1.price - list2.price);\r\n      }\r\n      if (action.payload.toUpperCase() === \"DISCOUNT\") {\r\n        sortedList.sort((list1, list2) => list2.discount - list1.discount);\r\n      }\r\n      return { ...state, shoppingList: sortedList };\r\n\r\n    case \"ADD_TO_CART\":\r\n      let cartList = state.cartList.slice();\r\n      const isAlreadAdded = cartList.some(list => list.id === action.payload.id);\r\n      if (!isAlreadAdded) {\r\n        cartList.push({ ...action.payload, qty: 1 });\r\n      }\r\n      return { ...state, cartList };\r\n\r\n    case \"ON_CHANGE_INPUT\":\r\n      return { ...state, searchValue: action.payload }\r\n\r\n    case \"ON_SUBMIT_SEARCH\":\r\n      let list = state.tempShoppingList.slice(), \r\n      filteredList = [];\r\n      state.tempList = state.tempShoppingList;\r\n      if (state.searchValue === null) {\r\n        alert('Please enter something to search in search box');\r\n        return state;\r\n      }\r\n      if (state.searchValue.trim() === '') {\r\n        return { ...state, shoppingList: state.tempList };\r\n      }\r\n      list.forEach((data) => {\r\n        if (data.name.toLowerCase() === state.searchValue.toLowerCase()) {\r\n          filteredList.push(data);\r\n        }\r\n      });\r\n      if(filteredList.length === 0){\r\n        alert(\"No item found\");\r\n      }\r\n      if (filteredList.length > 0) {\r\n        return { ...state, shoppingList: filteredList }\r\n      }\r\n      return state;\r\n\r\n    case 'ON_CHANGE_RANGE_VALUE': {\r\n      return { ...state, rangevalue: action.payload }\r\n    }\r\n\r\n    case 'ON_APPLY_FILTER': {\r\n      const list = state.tempShoppingList;\r\n      const range = state.rangevalue;\r\n      let itemFound = true;\r\n      const filteredList = list.filter(el => (el.price >= range.min && el.price <= range.max));\r\n      if(filteredList.length === 0){\r\n        alert('No item found')\r\n         itemFound = false;\r\n      }\r\n      return { ...state, shoppingList: filteredList,itemFound }\r\n    }\r\n\r\n    case 'REMOVE_ITEM': {\r\n      const data = action.payload;\r\n      return { ...state, cartList: state.cartList.filter(item => item.id !== data.id) };\r\n    }\r\n\r\n    case 'UPDATE_ITEM_QTY': {\r\n      const data = action.payload;\r\n      const cartList = state.cartList.slice();\r\n\r\n      if (data.action.toUpperCase() === 'ADD') {\r\n        cartList.forEach((el) => {\r\n          if (el.id === data.id) {\r\n            el.qty += 1;\r\n          }\r\n        });\r\n      }\r\n      if (data.action.toUpperCase() === 'REMOVE') {\r\n        cartList.forEach((el) => {\r\n          if (el.id === data.id && el.qty > 1) {\r\n            el.qty -= 1;\r\n          }\r\n        });\r\n      }\r\n      return { ...state, cartList };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './state/configureStore';\r\nimport { HashRouter } from 'react-router-dom';  \r\n\r\nReactDOM.render(<Provider store={configureStore()}> \r\n      <HashRouter><App /></HashRouter> </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport shopingListReducer from \"./ShoppingList/shoppingListReducer\";\r\n\r\nexport default () => {\r\n  return createStore(\r\n    combineReducers({\r\n      shopingListReducer\r\n    }),\r\n    compose(applyMiddleware(thunkMiddleware))\r\n  );\r\n};\r\n"],"sourceRoot":""}