{"version":3,"sources":["components/Cart/index.js"],"names":["cartList","renderCartList","list","map","data","index","key","toString","className","ItemList","onClick","props","updateQty","bind","action","id","qty","removeItem","percentage","price","c","parseFloat","Math","round","priceDetails","totalDiscount","forEach","discount","total_qty","reduce","t","total_price","this","Fragment","showCart","length","React","Component","mapDispatchToProps","getShoppingList","sortShoppingList","addToCart","connect","state","shopingListReducer"],"mappings":"yQAaMA,E,2MAEFC,eAAiB,SAACC,GACd,OAAOA,EAAKC,KAAI,SAACC,EAAMC,GACnB,OAAQ,yBAAKC,IAAKD,EAAME,WAAYC,UAAU,4CAC1C,yBAAKA,UAAU,iBACVC,YAASL,GAAK,GAAO,GAAO,IAEjC,yBAAKI,UAAU,iBACX,2BAAOE,QAAS,EAAKC,MAAMC,UAAUC,KAArB,eAAgC,CAAEC,OAAQ,SAAUC,GAAIX,EAAKW,MAA7E,IAAqF,uBAAGP,UAAU,uBAAlG,KADJ,KAC0I,8BAAOJ,EAAKY,KADtJ,IACkK,2BAAON,QAAS,EAAKC,MAAMC,UAAUC,KAArB,eAAgC,CAAEC,OAAQ,MAAOC,GAAIX,EAAKW,MAA1E,IAAkF,uBAAGP,UAAU,wBAEjQ,yBAAKA,UAAU,YACX,2BAAG,2BAAOE,QAAS,EAAKC,MAAMM,WAAWJ,KAAtB,eAAiCT,IAAjD,mB,EAWnBc,WAAa,SAACC,EAAOD,GACjB,IAAIE,EAAKC,WAAWF,GAASE,WAAWH,GAAe,IACvD,OAAOI,KAAKC,MAAMH,I,EAOtBI,aAAe,SAACtB,GACZ,IAAIiB,EAAQ,EACRM,EAAgB,EACpBvB,EAAKwB,SAAQ,SAAAxB,GACTiB,GAASjB,EAAKiB,MAAQjB,EAAKc,IAC3BS,GAAiB,EAAKP,WAAWC,EAAOjB,EAAKyB,aAEjD,IAAMC,EAAY1B,EAAK2B,QAAO,SAACC,EAAD,UAAgBA,EAAhB,EAAMd,MAAmB,GACjDe,EAAcZ,EAAQM,EAE5B,OAAQ,6BACJ,yCAAeG,EAAf,WADI,MACwCT,EADxC,IAC+C,6BACnD,4CAFI,MAEwBM,EAFxB,IAEuC,6BAC3C,2BAAG,gDAAsBM,GAAzB,O,wEAIE,IACE/B,EAAagC,KAAKrB,MAAlBX,SAER,OACI,kBAAC,IAAMiC,SAAP,KACI,kBAAC,IAAD,CAAQC,UAAU,IAEdlC,EAASmC,OAAS,EACd,yBAAK3B,UAAU,WACX,yBAAKA,UAAU,YACVwB,KAAK/B,eAAeD,IAEzB,yBAAKQ,UAAU,8CACX,6BACI,6BACI,wBAAIO,GAAG,uBAAP,mBAEHiB,KAAKR,aAAaxB,MAI/B,wD,GAtEDoC,IAAMC,WAoFvBC,EAAqB,CACvBC,oBACAC,qBACAC,cACAxB,eACAL,eAGW8B,uBAhBS,SAAAC,GAEpB,MAAO,CACH3C,SAF2B2C,EAAvBC,mBAEyB5C,YAaGsC,EAAzBI,CAA6C1C","file":"static/js/6.d250ff1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getShoppingList,\r\n    sortShoppingList,\r\n    addToCart,\r\n    removeItem,\r\n    updateQty\r\n} from \"../../state/ShoppingList/shoppingListAction\";\r\nimport Header from '../Header/index';\r\nimport './index.css';\r\nimport { ItemList } from '../ProductList';\r\n\r\nclass cartList extends React.Component {\r\n\r\n    renderCartList = (list) => {\r\n        return list.map((data, index) => {\r\n            return (<div key={index.toString()} className=\"row  d-flex align-items-center cart-list\">\r\n                <div className=\"col-sm-6 pl-1\">\r\n                    {ItemList(data,false, false, true)}\r\n                </div>\r\n                <div className=\"col-sm-2 pl-1\">\r\n                    <label onClick={this.props.updateQty.bind(this, { action: 'REMOVE', id: data.id })}> <i className=\"fa fa-minus-circle\"></i> </label>  <span>{data.qty}</span> <label onClick={this.props.updateQty.bind(this, { action: 'ADD', id: data.id })}> <i className=\"fa fa-plus-circle\"></i></label>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <b><label onClick={this.props.removeItem.bind(this, data)}> REMOVE </label></b>\r\n                </div>\r\n            </div>)\r\n        })\r\n    }\r\n\r\n    /**\r\n  * calculate the percentage.\r\n  * @param {Number} price - total price of the item.\r\n  * @param {Number} discount - discount on total price.\r\n  */\r\n    percentage = (price, percentage) => {\r\n        var c = (parseFloat(price) * parseFloat(percentage)) / 100;\r\n        return Math.round(c);\r\n    }\r\n\r\n    /**\r\n    * calculate the price details and discounts.\r\n    * @param {Object} list - The object which contains the price and qty details  etc...\r\n    */\r\n    priceDetails = (list) => {\r\n        let price = 0;\r\n        let totalDiscount = 0;\r\n        list.forEach(list => {\r\n            price += list.price * list.qty;\r\n            totalDiscount += this.percentage(price, list.discount);\r\n        });\r\n        const total_qty = list.reduce((t, { qty }) => t + qty, 0);\r\n        const total_price = price - totalDiscount;\r\n\r\n        return (<div>\r\n            <label>Price ({total_qty} Items)</label> : {price} <br />\r\n            <label> Discount</label> : {totalDiscount} <br />\r\n            <b><label>Total Payable {total_price}</label> </b>\r\n        </div>)\r\n    }\r\n\r\n    render() {\r\n        const { cartList } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Header showCart={false} />\r\n                {\r\n                    cartList.length > 0 ?\r\n                        <div className=\"row m-1\">\r\n                            <div className=\"col-sm-8\">\r\n                                {this.renderCartList(cartList)}\r\n                            </div>\r\n                            <div className=\"col-sm-4 h-100 price-details-container p-1\">\r\n                                <div>\r\n                                    <div>\r\n                                        <h5 id=\"price-detail-header\"> PRICE DETAILS</h5>\r\n                                    </div>\r\n                                    {this.priceDetails(cartList)}\r\n                                </div>\r\n                            </div>\r\n                        </div> :\r\n                        <p> Your cart is empty </p>\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nconst mapStatetoProps = state => {\r\n    const { shopingListReducer } = state;\r\n    return {\r\n        cartList: shopingListReducer.cartList,\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    getShoppingList,\r\n    sortShoppingList,\r\n    addToCart,\r\n    removeItem,\r\n    updateQty\r\n};\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(cartList);\r\n"],"sourceRoot":""}